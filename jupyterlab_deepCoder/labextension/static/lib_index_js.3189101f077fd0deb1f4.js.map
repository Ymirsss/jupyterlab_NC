{"version":3,"file":"lib_index_js.3189101f077fd0deb1f4.js","mappings":";;;;;;;;;;;;;;;;;;AAA+C;AACS;AAChB;AACxC;AACA;AACA,yBAAyB,+EAA6B;AACtD,wBAAwB,8DAAW,mBAAmB,mEAA2B;AACjF,eAAe,8EAA4B;AAC3C;AACA;AACA;AACA,kCAAkC,gEAAwB;AAC1D,aAAa;AACb,SAAS;AACT;AACA;AACA,8BAA8B,gFAA8B;AAC5D,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iEAAe,yBAAyB,EAAC;;;;;;;;;;;;;;;AC1BlC;AACP;AACA;AACA,oCAAoC,4BAA4B;AAChE;AACA,wCAAwC,4BAA4B;AACpE,2CAA2C,4BAA4B;AACvE,wCAAwC,4BAA4B;AACpE,uCAAuC,4BAA4B;AACnE,yCAAyC,4BAA4B;AACrE,6CAA6C,4BAA4B;AACzE;AACA,6CAA6C,kBAAkB;AAC/D,6CAA6C,kBAAkB;AAC/D,gDAAgD,kBAAkB;AAClE,wCAAwC,4BAA4B;AACpE;AACA,yMAAyM,mCAAmC,0BAA0B;AACtQ;AACA,gDAAgD,4BAA4B;AAC5E,oCAAoC,2BAA2B;AAC/D;AACA;AACA;AACA,CAAC,8BAA8B;;;;;;;;;;;;;;;;;;ACxByB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,sEAAgB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,sEAAgB,iGAAiG,GAAG;AAC9I;AACA;AACA;AACA;AACA,kBAAkB,sEAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sEAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB,sEAAgB;AACjC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrMwD;AAGZ;AACmB;AACd;AACjD,YAAY,iBAAiB;AAC2B;AACJ;AACb;AAGc;AACJ;AACT;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+CAAyB;AACnD,yCAAyC,uEAA+B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+DAAa;AACxC;AACA,sBAAsB,8DAAO;AAC7B,sBAAsB,sEAA8B;AACpD,wBAAwB,qEAA6B;AACrD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kEAA0B;AAC/C;AACA,SAAS;AACT;AACA,kCAAkC,iDAAI,GAAG,UAAU;AACnD;AACA;AACA;AACA,gCAAgC,SAAS,sEAA8B,EAAE;AACzE,gCAAgC,mBAAmB;AACnD,gCAAgC,SAAS,yEAAiC,EAAE;AAC5E,gCAAgC,mBAAmB;AACnD,gCAAgC,SAAS,sEAA8B,EAAE;AACzE,gCAAgC,mBAAmB;AACnD,gCAAgC,SAAS,qEAA6B,EAAE;AACxE,gCAAgC,mBAAmB;AACnD,gCAAgC,SAAS,uEAA+B,EAAE;AAC1E,gCAAgC,mBAAmB;AACnD,gCAAgC,SAAS,2EAAmC,EAAE;AAC9E;AACA,yCAAyC,SAAS;AAClD;AACA,gCAAgC,MAAM,qCAAqC,wCAAwC;AACnH,gCAAgC,MAAM,qCAAqC,wCAAwC;AACnH,gCAAgC,MAAM,qCAAqC,2CAA2C;AACtH,kCAAkC,oCAAoC;AACtE,4CAA4C,SAAS;AACrD;AACA,mCAAmC,MAAM,qCAAqC,wCAAwC;AACtH,mCAAmC,MAAM,qCAAqC,wCAAwC;AACtH,mCAAmC,MAAM,qCAAqC,2CAA2C;AACzH,kCAAkC,uCAAuC;AACzE,iDAAiD,SAAS;AAC1D;AACA,wCAAwC,MAAM,qCAAqC,wCAAwC;AAC3H,wCAAwC,MAAM,qCAAqC,wCAAwC;AAC3H,kCAAkC,uCAAuC;AACzE,+CAA+C,SAAS;AACxD;AACA,wCAAwC,MAAM,qCAAqC,wCAAwC;AAC3H,wCAAwC,MAAM,qCAAqC,wCAAwC;AAC3H,kCAAkC,uCAAuC;AACzE;AACA;AACA;AACA;AACA;AACA,sCAAsC,iBAAiB;AACvD;AACA;AACA,oCAAoC,4BAA4B,GAAG,UAAU;AAC7E;AACA,kCAAkC,SAAS;AAC3C;AACA,cAAc;AACd;AACA,YAAY;AACZ;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,YAAY;AACZ,qCAAqC,sEAA8B;AACnE;AACA;AACA,aAAa;AACb,uBAAuB,iEAAyB;AAChD;AACA;AACA,SAAS;AACT,qCAAqC,sEAA8B;AACnE;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT,qCAAqC,yEAAiC;AACtE;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT,qCAAqC,sEAA8B;AACnE;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT,qCAAqC,qEAA6B;AAClE;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT,qCAAqC,uEAA+B;AACpE;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe,EAAE,kEAAgB,EAAE,2DAAS;AAC3D,eAAe,yEAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://jupyterlab_deepCoder/./lib/client.js","webpack://jupyterlab_deepCoder/./lib/constants.js","webpack://jupyterlab_deepCoder/./lib/deepcoder.js","webpack://jupyterlab_deepCoder/./lib/index.js"],"sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\r\nimport { ServerConnection } from '@jupyterlab/services';\r\nimport { Constants } from './constants';\r\nclass JupyterlabDeepCoderClient {\r\n    request(path, method, body) {\r\n        const settings = ServerConnection.makeSettings();\r\n        const fullUrl = URLExt.join(settings.baseUrl, Constants.SHORT_PLUGIN_NAME, path);\r\n        return ServerConnection.makeRequest(fullUrl, {\r\n            body,\r\n            method,\r\n            headers: new Headers({\r\n                'Plugin-Version': Constants.PLUGIN_VERSION\r\n            })\r\n        }, settings).then(response => {\r\n            if (response.status !== 200) {\r\n                return response.text().then(() => {\r\n                    throw new ServerConnection.ResponseError(response, response.statusText);\r\n                });\r\n            }\r\n            return response.text();\r\n        });\r\n    }\r\n    getAvailableFormatters() {\r\n        return this.request('formatters', 'GET', null);\r\n    }\r\n}\r\nexport default JupyterlabDeepCoderClient;\r\n","export var Constants;\r\n(function (Constants) {\r\n    Constants.SHORT_PLUGIN_NAME = 'jupyterlab_deepCoder';\r\n    Constants.OPTIMIZE_COMMAND = `${Constants.SHORT_PLUGIN_NAME}:optimize`;\r\n    /*workaround 1: single-framework*/\r\n    Constants.OPTIMIZE_AMP_COMMAND = `${Constants.SHORT_PLUGIN_NAME}:optimize_amp`;\r\n    Constants.OPTIMIZE_INC_DQ_COMMAND = `${Constants.SHORT_PLUGIN_NAME}:optimize_inc_dq`;\r\n    Constants.OPTIMIZE_JIT_COMMAND = `${Constants.SHORT_PLUGIN_NAME}:optimize_jit`;\r\n    Constants.OPTIMIZE_CL_COMMAND = `${Constants.SHORT_PLUGIN_NAME}:optimize_cl`;\r\n    Constants.OPTIMIZE_CToC_COMMAND = `${Constants.SHORT_PLUGIN_NAME}:optimize_ctoc`;\r\n    Constants.OPTIMIZE_PROFILER_COMMAND = `${Constants.SHORT_PLUGIN_NAME}:optimize_profiler`;\r\n    /*workaround 2: multi-framework*/\r\n    // export const OPTIMIZE_PT_COMMAND = `${SHORT_PLUGIN_NAME}:optimize_pytorch`;\r\n    // export const OPTIMIZE_TF_COMMAND = `${SHORT_PLUGIN_NAME}:optimize_tensorflow`;\r\n    // export const OPTIMIZE_KERAS_COMMAND = `${SHORT_PLUGIN_NAME}:optimize_keras`;\r\n    Constants.OPTIMIZE_ALL_COMMAND = `${Constants.SHORT_PLUGIN_NAME}:optimize_all`;\r\n    // TODO: Extract this to style and import svg as string\r\n    Constants.ICON_FORMAT_ALL_SVG = '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" focusable=\"false\" width=\"1em\" height=\"1em\" style=\"-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 1792 1792\"><path class=\"jp-icon3\" d=\"M1473 929q7-118-33-226.5t-113-189t-177-131T929 325q-116-7-225.5 32t-192 110.5t-135 175T317 863q-7 118 33 226.5t113 189t177.5 131T862 1467q155 9 293-59t224-195.5t94-283.5zM1792 0l-349 348q120 117 180.5 272t50.5 321q-11 183-102 339t-241 255.5T999 1660L0 1792l347-347q-120-116-180.5-271.5T116 852q11-184 102-340t241.5-255.5T792 132q167-22 500-66t500-66z\" fill=\"#626262\"/></svg>';\r\n    Constants.ICON_FORMAT_ALL = 'fa fa-superpowers';\r\n    Constants.LONG_PLUGIN_NAME = `@ryantam626/${Constants.SHORT_PLUGIN_NAME}`;\r\n    Constants.SETTINGS_SECTION = `${Constants.LONG_PLUGIN_NAME}:settings`;\r\n    Constants.COMMAND_SECTION_NAME = 'Jupyterlab Code Optimizer';\r\n    // TODO: Use package.json info\r\n    Constants.PLUGIN_VERSION = '1.5.1';\r\n})(Constants || (Constants = {}));\r\n","import { showErrorMessage } from '@jupyterlab/apputils';\r\nclass JupyterlabCodeOptimizer {\r\n    constructor(client) {\r\n        this.client = client;\r\n        this.working = false;\r\n    }\r\n    optimizeCode(code, formatter, options, notebook) {\r\n        return this.client\r\n            .request('optimize', 'POST', JSON.stringify({\r\n            code,\r\n            notebook,\r\n            formatter,\r\n            options\r\n        }))\r\n            .then(resp => JSON.parse(resp));\r\n    }\r\n}\r\nexport class JupyterlabNotebookCodeOptimizer extends JupyterlabCodeOptimizer {\r\n    constructor(client, notebookTracker) {\r\n        super(client);\r\n        this.notebookTracker = notebookTracker;\r\n    }\r\n    async optimizeAction(config, formatter) {\r\n        return this.optimizeCells(true, config, formatter);\r\n    }\r\n    // public async optimizeSelectedCodeCells(\r\n    //   config: any,\r\n    //   formatter?: string,\r\n    //   notebook?: Notebook\r\n    // ) {\r\n    //   return this.optimizeCells(true, config, formatter, notebook);\r\n    // }\r\n    async optimizeAllCodeCells(config, formatter, notebook) {\r\n        console.log(\"optimize feature:\", formatter);\r\n        return this.optimizeCells(false, config, formatter, notebook);\r\n    }\r\n    // /*Todo: Automatic Mixed Precison*/\r\n    // public async optimizeAllCodeCells_withAMP(\r\n    //   config: any,\r\n    //   formatter?: string,\r\n    //   notebook?: Notebook\r\n    // ) {\r\n    //   return this.optimizeCells(false, config, formatter, notebook);\r\n    // }\r\n    getCodeCells(selectedOnly = true, notebook) {\r\n        if (!this.notebookTracker.currentWidget) {\r\n            return [];\r\n        }\r\n        const codeCells = [];\r\n        notebook = notebook || this.notebookTracker.currentWidget.content;\r\n        notebook.widgets.forEach((cell) => {\r\n            if (cell.model.type === 'code') {\r\n                codeCells.push(cell);\r\n                //  if (!selectedOnly || notebook.isSelectedOrActive(cell)) {\r\n                //    codeCells.push(cell as CodeCell);\r\n                //  }\r\n            }\r\n        });\r\n        return codeCells;\r\n    }\r\n    // private getNotebookType() {\r\n    //   if (!this.notebookTracker.currentWidget) {\r\n    //     return null;\r\n    //   }\r\n    //  // const metadata = this.notebookTracker.currentWidget.content.model.metadata.toJSON();\r\n    //   const metadata = false;\r\n    //   if (!metadata) {\r\n    //     return null;\r\n    //   }\r\n    //   // prefer kernelspec language\r\n    //   // @ts-ignore\r\n    //   if (metadata.kernelspec && metadata.kernelspec.language) {\r\n    //     // @ts-ignore\r\n    //     return metadata.kernelspec.language.toLowerCase();\r\n    //   }\r\n    //   // otherwise, check language info code mirror mode\r\n    //   // @ts-ignore\r\n    //   if (metadata.language_info && metadata.language_info.codemirror_mode) {\r\n    //     // @ts-ignore\r\n    //     return metadata.language_info.codemirror_mode.name.toLowerCase();\r\n    //   }\r\n    //   return null;\r\n    // }\r\n    // private getDefaultFormatters(config: any): Array<string> {\r\n    //   const notebookType = this.getNotebookType();\r\n    //   if (notebookType) {\r\n    //     const defaultFormatter =\r\n    //       config.preferences.default_formatter[notebookType];\r\n    //     if (defaultFormatter instanceof Array) {\r\n    //       return defaultFormatter;\r\n    //     } else if (defaultFormatter !== undefined) {\r\n    //       return [defaultFormatter];\r\n    //     }\r\n    //   }\r\n    //   return [];\r\n    // }\r\n    async optimizeCells(selectedOnly, config, formatter, notebook) {\r\n        var _a;\r\n        console.log(\"If it works: \", this.working);\r\n        if (this.working) {\r\n            return;\r\n        }\r\n        try {\r\n            this.working = true;\r\n            const selectedCells = this.getCodeCells(selectedOnly, notebook);\r\n            if (selectedCells.length === 0) {\r\n                console.log(\"seletedCells: \", selectedCells);\r\n                this.working = false;\r\n                return;\r\n            }\r\n            console.log(\"I am here\");\r\n            // const defaultFormatters = this.getDefaultFormatters(config);\r\n            // console.log(\"default Formatters: \", defaultFormatters)\r\n            // const formattersToUse =\r\n            //   formatter !== undefined ? [formatter] : defaultFormatters;\r\n            // console.log(\"formattersToUse: \", formattersToUse)\r\n            // if (formattersToUse.length === 0) {\r\n            //   await showErrorMessage(\r\n            //     'Jupyterlab Code Formatter Error',\r\n            //     `Unable to find default formatters to use, please file an issue on GitHub.`\r\n            //   );\r\n            // }\r\n            // for (let formatterToUse of formattersToUse) {\r\n            //   if (formatterToUse === 'noop' || formatterToUse === 'skip') {\r\n            //     continue;\r\n            //   }\r\n            const optimize_type = formatter !== undefined ? formatter : 'pytorch_mixed_precision_cpu';\r\n            const currentTexts = selectedCells.map(cell => cell.model.value.text);\r\n            console.log(\"current texts:\", currentTexts);\r\n            const optimizedTexts = await this.optimizeCode(currentTexts, optimize_type, /*formatterToUse*/ undefined, /*config[formatterToUse]*/ true);\r\n            for (let i = 0; i < selectedCells.length; ++i) {\r\n                const cell = selectedCells[i];\r\n                const currentText = currentTexts[i];\r\n                const optimizedText = optimizedTexts.code[i];\r\n                if (cell.model.value.text === currentText) {\r\n                    if (optimizedText.error) {\r\n                        if (!((_a = config.suppressFormatterErrors) !== null && _a !== void 0 ? _a : false)) {\r\n                            await showErrorMessage('Optimize Code Error', optimizedText.error);\r\n                        }\r\n                    }\r\n                    else {\r\n                        cell.model.value.text = optimizedText.code;\r\n                    }\r\n                }\r\n                else {\r\n                    await showErrorMessage('Optimize Code Error', `Cell value changed since format request was sent, formatting for cell ${i} skipped.`);\r\n                }\r\n            }\r\n        }\r\n        catch (error) {\r\n            await showErrorMessage('Optimize Code Error', error);\r\n        }\r\n        this.working = false;\r\n    }\r\n    applicable(formatter, currentWidget) {\r\n        const currentNotebookWidget = this.notebookTracker.currentWidget;\r\n        // TODO: Handle showing just the correct formatter for the language later\r\n        return currentNotebookWidget && currentWidget === currentNotebookWidget;\r\n    }\r\n}\r\nexport class JupyterlabFileEditorCodeOptimizer extends JupyterlabCodeOptimizer {\r\n    constructor(client, editorTracker) {\r\n        super(client);\r\n        this.editorTracker = editorTracker;\r\n    }\r\n    optimizeAction(config, formatter) {\r\n        if (this.working) {\r\n            return;\r\n        }\r\n        const editorWidget = this.editorTracker.currentWidget;\r\n        this.working = true;\r\n        if (editorWidget == null) {\r\n            return;\r\n        }\r\n        const editor = editorWidget.content.editor;\r\n        const code = editor.model.value.text;\r\n        this.optimizeCode([code], formatter, config[formatter], false)\r\n            .then(data => {\r\n            if (data.code[0].error) {\r\n                void showErrorMessage('Optimize Code Error', data.code[0].error);\r\n                this.working = false;\r\n                return;\r\n            }\r\n            //   this.editorTracker.currentWidget.content.editor.model.value.text =\r\n            //     data.code[0].code;\r\n            this.working = false;\r\n        })\r\n            .catch(error => {\r\n            this.working = false;\r\n            void showErrorMessage('Optimize Code Error', error);\r\n        });\r\n    }\r\n    applicable(formatter, currentWidget) {\r\n        const currentEditorWidget = this.editorTracker.currentWidget;\r\n        // TODO: Handle showing just the correct formatter for the language later\r\n        return currentEditorWidget && currentWidget === currentEditorWidget;\r\n    }\r\n}\r\n","import { INotebookTracker } from '@jupyterlab/notebook';\r\nimport { ICommandPalette, \r\n// showErrorMessage,\r\nToolbarButton } from '@jupyterlab/apputils';\r\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\r\nimport { IMainMenu } from '@jupyterlab/mainmenu';\r\n// import { IEditorTracker } from '@jupyterlab/fileeditor';\r\nimport { DisposableDelegate } from '@lumino/disposable';\r\nimport { LabIcon } from '@jupyterlab/ui-components';\r\nimport { Menu } from '@lumino/widgets';\r\nimport { \r\n// JupyterlabFileEditorCodeOptimizer,\r\nJupyterlabNotebookCodeOptimizer } from './deepcoder';\r\nimport JupyterlabDeepCoderClient from './client';\r\nimport { Constants } from './constants';\r\nclass JupyterLabDeepCoder {\r\n    // private fileEditorCodeOptimizer: JupyterlabFileEditorCodeOptimizer;\r\n    constructor(app, tracker, \r\n    // palette: ICommandPalette,\r\n    // settingRegistry: ISettingRegistry,\r\n    menu) {\r\n        this.app = app;\r\n        this.tracker = tracker;\r\n        // this.editorTracker = editorTracker;\r\n        // this.palette = palette;\r\n        // this.settingRegistry = settingRegistry;\r\n        this.menu = menu;\r\n        this.client = new JupyterlabDeepCoderClient();\r\n        this.notebookCodeOptimizer = new JupyterlabNotebookCodeOptimizer(this.client, this.tracker);\r\n        // this.fileEditorCodeOptimizer = new JupyterlabFileEditorCodeOptimizer(\r\n        //   this.client,\r\n        //   this.editorTracker\r\n        // );\r\n        console.log(\"Begin----\");\r\n        // this.setupSettings();\r\n        console.log(\"Finish setupSettings\");\r\n        this.setupAllCommands();\r\n        console.log(\"Finish setupAllCommands\");\r\n        this.setupContextMenu();\r\n        console.log(\"Finish setupContextMenu\");\r\n        this.setupWidgetExtension();\r\n        console.log(\"Finish setupWidgetExtension\");\r\n    }\r\n    createNew(nb, context) {\r\n        // const self = this;\r\n        const button = new ToolbarButton({\r\n            tooltip: 'Optimize',\r\n            icon: new LabIcon({\r\n                name: Constants.OPTIMIZE_ALL_COMMAND,\r\n                svgstr: Constants.ICON_FORMAT_ALL_SVG\r\n            }),\r\n            onClick: async () => {\r\n                // await self.notebookCodeOptimizer.optimizeAllCodeCells(\r\n                //   this.config,\r\n                //   undefined,\r\n                //   nb.content\r\n                // );\r\n                console.log(\"It's an empty button.\");\r\n            }\r\n        });\r\n        nb.toolbar.addItem(\"Optimize Code\", button);\r\n        // nb.toolbar.insertAfter(\r\n        //   'cellType',\r\n        //   this.app.commands.label(Constants.OPTIMIZE_ALL_COMMAND),\r\n        //   button\r\n        // );\r\n        nb.toolbar.insertItem(10, 'clearOutputs', button);\r\n        // context.saveState.connect(this.onSave, this);\r\n        return new DisposableDelegate(() => {\r\n            button.dispose();\r\n        });\r\n    }\r\n    // private async onSave(\r\n    //   context: DocumentRegistry.IContext<INotebookModel>,\r\n    //   state: DocumentRegistry.SaveState\r\n    // ) {\r\n    //   if (state === 'started' && this.config.formatOnSave) {\r\n    //     await this.notebookCodeOptimizer.optimizeAllCodeCells(this.config);\r\n    //   }\r\n    // }\r\n    setupWidgetExtension() {\r\n        this.app.docRegistry.addWidgetExtension('Notebook', this);\r\n    }\r\n    setupContextMenu() {\r\n        this.app.contextMenu.addItem({\r\n            command: Constants.OPTIMIZE_COMMAND,\r\n            selector: '.jp-Notebook'\r\n        });\r\n        const commands = this.app.commands;\r\n        const deepcoderMenu = new Menu({ commands });\r\n        deepcoderMenu.title.label = 'NeuralCoder';\r\n        /*workaround 1: single-framework*/\r\n        deepcoderMenu.title.label;\r\n        deepcoderMenu.addItem({ command: Constants.OPTIMIZE_AMP_COMMAND });\r\n        deepcoderMenu.addItem({ type: 'separator' });\r\n        deepcoderMenu.addItem({ command: Constants.OPTIMIZE_INC_DQ_COMMAND });\r\n        deepcoderMenu.addItem({ type: 'separator' });\r\n        deepcoderMenu.addItem({ command: Constants.OPTIMIZE_JIT_COMMAND });\r\n        deepcoderMenu.addItem({ type: 'separator' });\r\n        deepcoderMenu.addItem({ command: Constants.OPTIMIZE_CL_COMMAND });\r\n        deepcoderMenu.addItem({ type: 'separator' });\r\n        deepcoderMenu.addItem({ command: Constants.OPTIMIZE_CToC_COMMAND });\r\n        deepcoderMenu.addItem({ type: 'separator' });\r\n        deepcoderMenu.addItem({ command: Constants.OPTIMIZE_PROFILER_COMMAND });\r\n        /*****workaround 2:multi-framework******/\r\n        // const amp_submenu = new Menu({commands})\r\n        // amp_submenu.title.label = 'Automatic Mixed Precison(BF16)'\r\n        // amp_submenu.addItem({args:{\"feature\":\"Automatic Mixed Precison\"},command: Constants.OPTIMIZE_PT_COMMAND})\r\n        // amp_submenu.addItem({args:{\"feature\":\"Automatic Mixed Precison\"},command: Constants.OPTIMIZE_TF_COMMAND})\r\n        // amp_submenu.addItem({args:{\"feature\":\"Automatic Mixed Precison\"},command: Constants.OPTIMIZE_KERAS_COMMAND})\r\n        // deepcoderMenu.addItem({type:'submenu', submenu:amp_submenu})\r\n        // const inc_dq_submenu = new Menu({commands})\r\n        // inc_dq_submenu.title.label = 'INC Dynamic Quantization(INT8)'\r\n        // inc_dq_submenu.addItem({args:{\"feature\":\"INC Dynamic Quantization\"},command: Constants.OPTIMIZE_PT_COMMAND})\r\n        // inc_dq_submenu.addItem({args:{\"feature\":\"Automatic Mixed Precison\"},command: Constants.OPTIMIZE_TF_COMMAND})\r\n        // inc_dq_submenu.addItem({args:{\"feature\":\"Automatic Mixed Precison\"},command: Constants.OPTIMIZE_KERAS_COMMAND})\r\n        // deepcoderMenu.addItem({type:'submenu', submenu:inc_dq_submenu})\r\n        // const inc8_static_submenu = new Menu({commands})\r\n        // inc8_static_submenu.title.label = 'INT8 STATIC Quantization  '\r\n        // inc8_static_submenu.addItem({args:{\"feature\":\"INC Dynamic Quantization\"},command: Constants.OPTIMIZE_PT_COMMAND})\r\n        // inc8_static_submenu.addItem({args:{\"feature\":\"INC Dynamic Quantization\"},command: Constants.OPTIMIZE_TF_COMMAND})\r\n        // deepcoderMenu.addItem({type:'submenu', submenu:inc_dq_submenu})\r\n        // const jit_trace_submenu = new Menu({commands})\r\n        // inc8_static_submenu.title.label = 'INT8 STATIC Quantization  '\r\n        // inc8_static_submenu.addItem({args:{\"feature\":\"INC Dynamic Quantization\"},command: Constants.OPTIMIZE_PT_COMMAND})\r\n        // inc8_static_submenu.addItem({args:{\"feature\":\"INC Dynamic Quantization\"},command: Constants.OPTIMIZE_TF_COMMAND})\r\n        // deepcoderMenu.addItem({type:'submenu', submenu:inc_dq_submenu})\r\n        this.menu.addMenu(deepcoderMenu);\r\n    }\r\n    setupAllCommands() {\r\n        // this.client.getAvailableFormatters().then(data => {\r\n        //   const formatters = JSON.parse(data).formatters;\r\n        //   const menuGroup: Array<{ command: string }> = [];\r\n        //   Object.keys(formatters).forEach(formatter => {\r\n        //     if (formatters[formatter].enabled) {\r\n        //       const command = `${Constants.SHORT_PLUGIN_NAME}:${formatter}`;\r\n        //       this.setupCommand(formatter, formatters[formatter].label, command);\r\n        //       menuGroup.push({ command });\r\n        //     }\r\n        //   });\r\n        //   this.menu.editMenu.addGroup(menuGroup);\r\n        // });\r\n        // this.app.commands.addCommand(Constants.OPTIMIZE_COMMAND, {\r\n        //   execute: async () => {\r\n        //     await this.notebookCodeOptimizer.optimizeSelectedCodeCells(this.config);\r\n        //   },\r\n        //   // TODO: Add back isVisible\r\n        //   label: 'Format cell'\r\n        // });\r\n        this.app.commands.addCommand(Constants.OPTIMIZE_ALL_COMMAND, {\r\n            execute: async () => {\r\n                await this.notebookCodeOptimizer.optimizeAllCodeCells(this.config);\r\n            },\r\n            iconClass: Constants.ICON_FORMAT_ALL,\r\n            iconLabel: 'Optimize code'\r\n            // TODO: Add back isVisible\r\n        });\r\n        this.app.commands.addCommand(Constants.OPTIMIZE_AMP_COMMAND, {\r\n            execute: async () => {\r\n                await this.notebookCodeOptimizer.optimizeAllCodeCells(this.config);\r\n            },\r\n            label: 'Automatic Mixed Precison'\r\n            // TODO: Add back isVisible\r\n        });\r\n        this.app.commands.addCommand(Constants.OPTIMIZE_INC_DQ_COMMAND, {\r\n            execute: async () => {\r\n                await this.notebookCodeOptimizer.optimizeAllCodeCells(this.config);\r\n            },\r\n            label: 'INC Dynamic Quantization (INT8) '\r\n            // TODO: Add back isVisible\r\n        });\r\n        this.app.commands.addCommand(Constants.OPTIMIZE_JIT_COMMAND, {\r\n            execute: async () => {\r\n                await this.notebookCodeOptimizer.optimizeAllCodeCells(this.config);\r\n            },\r\n            label: 'JIT'\r\n            // TODO: Add back isVisible\r\n        });\r\n        this.app.commands.addCommand(Constants.OPTIMIZE_CL_COMMAND, {\r\n            execute: async () => {\r\n                await this.notebookCodeOptimizer.optimizeAllCodeCells(this.config);\r\n            },\r\n            label: 'Channels Last (memory fomat)'\r\n            // TODO: Add back isVisible\r\n        });\r\n        this.app.commands.addCommand(Constants.OPTIMIZE_CToC_COMMAND, {\r\n            execute: async () => {\r\n                await this.notebookCodeOptimizer.optimizeAllCodeCells(this.config, \"pytorch_cuda_to_cpu\");\r\n            },\r\n            label: 'CUDA to CPU'\r\n            // TODO: Add back isVisible\r\n        });\r\n        // this.app.commands.addCommand(Constants.OPTIMIZE_PROFILER_COMMAND, {\r\n        //   execute: async () => {\r\n        //     await this.notebookCodeOptimizer.optimizeAllCodeCells(this.config);\r\n        //   },\r\n        //   label: 'Profiler'\r\n        //   // TODO: Add back isVisible\r\n        // });\r\n    }\r\n}\r\n/**\r\n * Initialization data for the deepcoder-jupyterlab extension.\r\n */\r\nconst plugin = {\r\n    id: 'deepcoder-jupyterlab:plugin',\r\n    autoStart: true,\r\n    // requires: [ICommandPalette,INotebookTracker,ISettingRegistry,IMainMenu,IEditorTracker],\r\n    requires: [ICommandPalette, INotebookTracker, IMainMenu],\r\n    optional: [ISettingRegistry],\r\n    activate: (app, palette, tracker, \r\n    // settingRegistry: ISettingRegistry,\r\n    menu) => {\r\n        new JupyterLabDeepCoder(app, tracker, \r\n        // palette\r\n        // settingRegistry,\r\n        menu);\r\n        console.log('JupyterLab extension jupyterlab_apod is activated!');\r\n        console.log('ICommandPalette:', palette);\r\n    }\r\n};\r\nexport default plugin;\r\n"],"names":[],"sourceRoot":""}