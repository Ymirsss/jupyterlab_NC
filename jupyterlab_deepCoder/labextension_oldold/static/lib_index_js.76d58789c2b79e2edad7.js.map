{"version":3,"file":"lib_index_js.76d58789c2b79e2edad7.js","mappings":";;;;;;;;;;;;;;;;;;AAA+C;AACS;AAChB;AACxC;AACA;AACA,yBAAyB,+EAA6B;AACtD,wBAAwB,8DAAW,mBAAmB,mEAA2B;AACjF,eAAe,8EAA4B;AAC3C;AACA;AACA;AACA,kCAAkC,gEAAwB;AAC1D,aAAa;AACb,SAAS;AACT;AACA;AACA,8BAA8B,gFAA8B;AAC5D,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iEAAe,yBAAyB,EAAC;;;;;;;;;;;;;;;AC1BlC;AACP;AACA;AACA,oCAAoC,4BAA4B;AAChE;AACA,wCAAwC,4BAA4B;AACpE,2CAA2C,4BAA4B;AACvE,wCAAwC,4BAA4B;AACpE,uCAAuC,4BAA4B;AACnE,yCAAyC,4BAA4B;AACrE,6CAA6C,4BAA4B;AACzE;AACA,6CAA6C,kBAAkB;AAC/D,6CAA6C,kBAAkB;AAC/D,gDAAgD,kBAAkB;AAClE,wCAAwC,4BAA4B;AACpE;AACA,yMAAyM,mCAAmC,0BAA0B;AACtQ;AACA,gDAAgD,4BAA4B;AAC5E,oCAAoC,2BAA2B;AAC/D;AACA;AACA;AACA,CAAC,8BAA8B;;;;;;;;;;;;;;;;;;ACxByB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,sEAAgB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,sEAAgB,iGAAiG,GAAG;AAC9I;AACA;AACA;AACA;AACA,kBAAkB,sEAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sEAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB,sEAAgB;AACjC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7MwD;AAGZ;AACmB;AACd;AACjD,YAAY,iBAAiB;AAC2B;AACJ;AACb;AACE;AAGY;AACJ;AACT;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+CAAyB;AACnD,yCAAyC,uEAA+B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mDAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+DAAa;AACxC;AACA,sBAAsB,8DAAO;AAC7B,sBAAsB,sEAA8B;AACpD,wBAAwB,qEAA6B;AACrD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kEAA0B;AAC/C;AACA,SAAS;AACT;AACA,kCAAkC,iDAAI,GAAG,UAAU;AACnD;AACA;AACA;AACA,gCAAgC,SAAS,sEAA8B,EAAE;AACzE,gCAAgC,mBAAmB;AACnD,gCAAgC,SAAS,yEAAiC,EAAE;AAC5E,gCAAgC,mBAAmB;AACnD,gCAAgC,SAAS,sEAA8B,EAAE;AACzE,gCAAgC,mBAAmB;AACnD,gCAAgC,SAAS,qEAA6B,EAAE;AACxE,gCAAgC,mBAAmB;AACnD,gCAAgC,SAAS,uEAA+B,EAAE;AAC1E,gCAAgC,mBAAmB;AACnD,gCAAgC,SAAS,2EAAmC,EAAE;AAC9E;AACA,yCAAyC,SAAS;AAClD;AACA,gCAAgC,MAAM,qCAAqC,wCAAwC;AACnH,gCAAgC,MAAM,qCAAqC,wCAAwC;AACnH,gCAAgC,MAAM,qCAAqC,2CAA2C;AACtH,kCAAkC,oCAAoC;AACtE,4CAA4C,SAAS;AACrD;AACA,mCAAmC,MAAM,qCAAqC,wCAAwC;AACtH,mCAAmC,MAAM,qCAAqC,wCAAwC;AACtH,mCAAmC,MAAM,qCAAqC,2CAA2C;AACzH,kCAAkC,uCAAuC;AACzE,iDAAiD,SAAS;AAC1D;AACA,wCAAwC,MAAM,qCAAqC,wCAAwC;AAC3H,wCAAwC,MAAM,qCAAqC,wCAAwC;AAC3H,kCAAkC,uCAAuC;AACzE,+CAA+C,SAAS;AACxD;AACA,wCAAwC,MAAM,qCAAqC,wCAAwC;AAC3H,wCAAwC,MAAM,qCAAqC,wCAAwC;AAC3H,kCAAkC,uCAAuC;AACzE;AACA;AACA;AACA;AACA;AACA,sCAAsC,iBAAiB;AACvD;AACA;AACA,oCAAoC,4BAA4B,GAAG,UAAU;AAC7E;AACA,kCAAkC,SAAS;AAC3C;AACA,cAAc;AACd;AACA,YAAY;AACZ;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,YAAY;AACZ,qCAAqC,sEAA8B;AACnE;AACA;AACA,aAAa;AACb,uBAAuB,iEAAyB;AAChD;AACA;AACA,SAAS;AACT,qCAAqC,sEAA8B;AACnE;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT,qCAAqC,yEAAiC;AACtE;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT,qCAAqC,sEAA8B;AACnE;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT,qCAAqC,qEAA6B;AAClE;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT,qCAAqC,uEAA+B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe,EAAE,kEAAgB,EAAE,2DAAS;AAC3D,eAAe,yEAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://jupyterlab_deepCoder/./lib/client.js","webpack://jupyterlab_deepCoder/./lib/constants.js","webpack://jupyterlab_deepCoder/./lib/deepcoder.js","webpack://jupyterlab_deepCoder/./lib/index.js"],"sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { Constants } from './constants';\nclass JupyterlabDeepCoderClient {\n    request(path, method, body) {\n        const settings = ServerConnection.makeSettings();\n        const fullUrl = URLExt.join(settings.baseUrl, Constants.SHORT_PLUGIN_NAME, path);\n        return ServerConnection.makeRequest(fullUrl, {\n            body,\n            method,\n            headers: new Headers({\n                'Plugin-Version': Constants.PLUGIN_VERSION\n            })\n        }, settings).then(response => {\n            if (response.status !== 200) {\n                return response.text().then(() => {\n                    throw new ServerConnection.ResponseError(response, response.statusText);\n                });\n            }\n            return response.text();\n        });\n    }\n    getAvailableFormatters() {\n        return this.request('formatters', 'GET', null);\n    }\n}\nexport default JupyterlabDeepCoderClient;\n","export var Constants;\n(function (Constants) {\n    Constants.SHORT_PLUGIN_NAME = 'jupyterlab_deepCoder';\n    Constants.OPTIMIZE_COMMAND = `${Constants.SHORT_PLUGIN_NAME}:optimize`;\n    /*workaround 1: single-framework*/\n    Constants.OPTIMIZE_AMP_COMMAND = `${Constants.SHORT_PLUGIN_NAME}:optimize_amp`;\n    Constants.OPTIMIZE_INC_DQ_COMMAND = `${Constants.SHORT_PLUGIN_NAME}:optimize_inc_dq`;\n    Constants.OPTIMIZE_JIT_COMMAND = `${Constants.SHORT_PLUGIN_NAME}:optimize_jit`;\n    Constants.OPTIMIZE_CL_COMMAND = `${Constants.SHORT_PLUGIN_NAME}:optimize_cl`;\n    Constants.OPTIMIZE_CToC_COMMAND = `${Constants.SHORT_PLUGIN_NAME}:optimize_ctoc`;\n    Constants.OPTIMIZE_PROFILER_COMMAND = `${Constants.SHORT_PLUGIN_NAME}:optimize_profiler`;\n    /*workaround 2: multi-framework*/\n    // export const OPTIMIZE_PT_COMMAND = `${SHORT_PLUGIN_NAME}:optimize_pytorch`;\n    // export const OPTIMIZE_TF_COMMAND = `${SHORT_PLUGIN_NAME}:optimize_tensorflow`;\n    // export const OPTIMIZE_KERAS_COMMAND = `${SHORT_PLUGIN_NAME}:optimize_keras`;\n    Constants.OPTIMIZE_ALL_COMMAND = `${Constants.SHORT_PLUGIN_NAME}:optimize_all`;\n    // TODO: Extract this to style and import svg as string\n    Constants.ICON_FORMAT_ALL_SVG = '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" focusable=\"false\" width=\"1em\" height=\"1em\" style=\"-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 1792 1792\"><path class=\"jp-icon3\" d=\"M1473 929q7-118-33-226.5t-113-189t-177-131T929 325q-116-7-225.5 32t-192 110.5t-135 175T317 863q-7 118 33 226.5t113 189t177.5 131T862 1467q155 9 293-59t224-195.5t94-283.5zM1792 0l-349 348q120 117 180.5 272t50.5 321q-11 183-102 339t-241 255.5T999 1660L0 1792l347-347q-120-116-180.5-271.5T116 852q11-184 102-340t241.5-255.5T792 132q167-22 500-66t500-66z\" fill=\"#626262\"/></svg>';\n    Constants.ICON_FORMAT_ALL = 'fa fa-superpowers';\n    Constants.LONG_PLUGIN_NAME = `@ryantam626/${Constants.SHORT_PLUGIN_NAME}`;\n    Constants.SETTINGS_SECTION = `${Constants.LONG_PLUGIN_NAME}:settings`;\n    Constants.COMMAND_SECTION_NAME = 'Jupyterlab Code Optimizer';\n    // TODO: Use package.json info\n    Constants.PLUGIN_VERSION = '0.1.0';\n})(Constants || (Constants = {}));\n","import { showErrorMessage } from '@jupyterlab/apputils';\nclass JupyterlabCodeOptimizer {\n    constructor(client) {\n        this.client = client;\n        this.working = false;\n    }\n    optimizeCode(code, formatter, options, notebook) {\n        return this.client\n            .request('optimize', 'POST', JSON.stringify({\n            code,\n            notebook,\n            formatter,\n            options\n        }))\n            .then(resp => JSON.parse(resp));\n    }\n}\nexport class JupyterlabNotebookCodeOptimizer extends JupyterlabCodeOptimizer {\n    constructor(client, notebookTracker) {\n        super(client);\n        this.notebookTracker = notebookTracker;\n    }\n    async optimizeAction(config, formatter) {\n        return this.optimizeCells(true, config, formatter);\n    }\n    // public async optimizeSelectedCodeCells(\n    //   config: any,\n    //   formatter?: string,\n    //   notebook?: Notebook\n    // ) {\n    //   return this.optimizeCells(true, config, formatter, notebook);\n    // }\n    async optimizeAllCodeCells(config, formatter, notebook) {\n        console.log(\"optimize feature:\", formatter);\n        return this.optimizeCells(false, config, formatter, notebook);\n    }\n    // /*Todo: Automatic Mixed Precison*/\n    // public async optimizeAllCodeCells_withAMP(\n    //   config: any,\n    //   formatter?: string,\n    //   notebook?: Notebook\n    // ) {\n    //   return this.optimizeCells(false, config, formatter, notebook);\n    // }\n    getCodeCells(selectedOnly = true, notebook) {\n        if (!this.notebookTracker.currentWidget) {\n            return [];\n        }\n        const codeCells = [];\n        notebook = notebook || this.notebookTracker.currentWidget.content;\n        notebook.widgets.forEach((cell) => {\n            if (cell.model.type === 'code') {\n                codeCells.push(cell);\n                //  if (!selectedOnly || notebook.isSelectedOrActive(cell)) {\n                //    codeCells.push(cell as CodeCell);\n                //  }\n            }\n        });\n        return codeCells;\n    }\n    // private getNotebookType() {\n    //   if (!this.notebookTracker.currentWidget) {\n    //     return null;\n    //   }\n    //  // const metadata = this.notebookTracker.currentWidget.content.model.metadata.toJSON();\n    //   const metadata = false;\n    //   if (!metadata) {\n    //     return null;\n    //   }\n    //   // prefer kernelspec language\n    //   // @ts-ignore\n    //   if (metadata.kernelspec && metadata.kernelspec.language) {\n    //     // @ts-ignore\n    //     return metadata.kernelspec.language.toLowerCase();\n    //   }\n    //   // otherwise, check language info code mirror mode\n    //   // @ts-ignore\n    //   if (metadata.language_info && metadata.language_info.codemirror_mode) {\n    //     // @ts-ignore\n    //     return metadata.language_info.codemirror_mode.name.toLowerCase();\n    //   }\n    //   return null;\n    // }\n    // private getDefaultFormatters(config: any): Array<string> {\n    //   const notebookType = this.getNotebookType();\n    //   if (notebookType) {\n    //     const defaultFormatter =\n    //       config.preferences.default_formatter[notebookType];\n    //     if (defaultFormatter instanceof Array) {\n    //       return defaultFormatter;\n    //     } else if (defaultFormatter !== undefined) {\n    //       return [defaultFormatter];\n    //     }\n    //   }\n    //   return [];\n    // }\n    async optimizeCells(selectedOnly, config, formatter, notebook) {\n        var _a;\n        console.log(\"If it works: \", this.working);\n        if (this.working) {\n            return;\n        }\n        try {\n            this.working = true;\n            const selectedCells = this.getCodeCells(selectedOnly, notebook);\n            console.log(\"selectedCells\", selectedCells);\n            if (selectedCells.length === 0) {\n                console.log(\"seletedCells: \", selectedCells);\n                this.working = false;\n                return;\n            }\n            console.log(\"I am here\");\n            // const defaultFormatters = this.getDefaultFormatters(config);\n            // console.log(\"default Formatters: \", defaultFormatters)\n            // const formattersToUse =\n            //   formatter !== undefined ? [formatter] : defaultFormatters;\n            // console.log(\"formattersToUse: \", formattersToUse)\n            // if (formattersToUse.length === 0) {\n            //   await showErrorMessage(\n            //     'Jupyterlab Code Formatter Error',\n            //     `Unable to find default formatters to use, please file an issue on GitHub.`\n            //   );\n            // }\n            // for (let formatterToUse of formattersToUse) {\n            //   if (formatterToUse === 'noop' || formatterToUse === 'skip') {\n            //     continue;\n            //   }\n            const optimize_type = formatter !== undefined ? formatter : 'pytorch_mixed_precision_cpu';\n            const currentTexts = selectedCells.map(cell => cell.model.value.text);\n            console.log(\"current texts:\", currentTexts);\n            const optimizedTexts = await this.optimizeCode(currentTexts, optimize_type, /*formatterToUse*/ undefined, /*config[formatterToUse]*/ true);\n            console.log(\"optimizedText:\", optimizedTexts);\n            console.log(\"selectedCells.length\", selectedCells.length);\n            for (let i = 0; i < selectedCells.length; ++i) {\n                const cell = selectedCells[i];\n                console.log(\"each cell:\", cell);\n                const currentText = currentTexts[i];\n                console.log(\"each currentText:\", currentText);\n                const optimizedText = optimizedTexts.code[i];\n                console.log(\"each optimizedText:\", optimizedText);\n                console.log(\"cell mode value text\", cell.model.value.text);\n                if (cell.model.value.text === currentText) {\n                    if (optimizedText.error) {\n                        if (!((_a = config.suppressFormatterErrors) !== null && _a !== void 0 ? _a : false)) {\n                            await showErrorMessage('Optimize Code Error', optimizedText.error);\n                        }\n                    }\n                    else {\n                        console.log(\"come here\");\n                        cell.model.value.text = optimizedText;\n                    }\n                }\n                else {\n                    await showErrorMessage('Optimize Code Error', `Cell value changed since format request was sent, formatting for cell ${i} skipped.`);\n                }\n            }\n        }\n        catch (error) {\n            await showErrorMessage('Optimize Code Error', error);\n        }\n        this.working = false;\n    }\n    applicable(formatter, currentWidget) {\n        const currentNotebookWidget = this.notebookTracker.currentWidget;\n        // TODO: Handle showing just the correct formatter for the language later\n        return currentNotebookWidget && currentWidget === currentNotebookWidget;\n    }\n}\nexport class JupyterlabFileEditorCodeOptimizer extends JupyterlabCodeOptimizer {\n    constructor(client, editorTracker) {\n        super(client);\n        this.editorTracker = editorTracker;\n    }\n    optimizeAction(config, formatter) {\n        if (this.working) {\n            return;\n        }\n        const editorWidget = this.editorTracker.currentWidget;\n        this.working = true;\n        if (editorWidget == null) {\n            return;\n        }\n        const editor = editorWidget.content.editor;\n        const code = editor.model.value.text;\n        this.optimizeCode([code], formatter, config[formatter], false)\n            .then(data => {\n            if (data.code[0].error) {\n                void showErrorMessage('Optimize Code Error', data.code[0].error);\n                this.working = false;\n                return;\n            }\n            //   this.editorTracker.currentWidget.content.editor.model.value.text =\n            //     data.code[0].code;\n            this.working = false;\n        })\n            .catch(error => {\n            this.working = false;\n            void showErrorMessage('Optimize Code Error', error);\n        });\n    }\n    applicable(formatter, currentWidget) {\n        const currentEditorWidget = this.editorTracker.currentWidget;\n        // TODO: Handle showing just the correct formatter for the language later\n        return currentEditorWidget && currentWidget === currentEditorWidget;\n    }\n}\n","import { INotebookTracker } from '@jupyterlab/notebook';\nimport { ICommandPalette, \n// showErrorMessage,\nToolbarButton } from '@jupyterlab/apputils';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\n// import { IEditorTracker } from '@jupyterlab/fileeditor';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { LabIcon } from '@jupyterlab/ui-components';\nimport { Menu } from '@lumino/widgets';\nimport { Widget } from '@lumino/widgets';\nimport { \n// JupyterlabFileEditorCodeOptimizer,\nJupyterlabNotebookCodeOptimizer } from './deepcoder';\nimport JupyterlabDeepCoderClient from './client';\nimport { Constants } from './constants';\nclass JupyterLabDeepCoder {\n    // private fileEditorCodeOptimizer: JupyterlabFileEditorCodeOptimizer;\n    constructor(app, tracker, \n    // palette: ICommandPalette,\n    // settingRegistry: ISettingRegistry,\n    menu) {\n        this.app = app;\n        this.tracker = tracker;\n        // this.editorTracker = editorTracker;\n        // this.palette = palette;\n        // this.settingRegistry = settingRegistry;\n        this.menu = menu;\n        this.client = new JupyterlabDeepCoderClient();\n        this.notebookCodeOptimizer = new JupyterlabNotebookCodeOptimizer(this.client, this.tracker);\n        // this.fileEditorCodeOptimizer = new JupyterlabFileEditorCodeOptimizer(\n        //   this.client,\n        //   this.editorTracker\n        // );\n        console.log(\"Begin----\");\n        // this.setupSettings();\n        console.log(\"Finish setupSettings\");\n        this.setupAllCommands();\n        console.log(\"Finish setupAllCommands\");\n        this.setupContextMenu();\n        console.log(\"Finish setupContextMenu\");\n        this.setupWidgetExtension();\n        console.log(\"Finish setupWidgetExtension\");\n        this.loading = new Widget();\n        this.loading.addClass('loading-circle');\n        this.loading.id = \"loading circle\";\n        this.loading.title.label = \"loading\";\n    }\n    createNew(nb, context) {\n        // const self = this;\n        const button = new ToolbarButton({\n            tooltip: 'Optimize',\n            icon: new LabIcon({\n                name: Constants.OPTIMIZE_ALL_COMMAND,\n                svgstr: Constants.ICON_FORMAT_ALL_SVG\n            }),\n            onClick: async () => {\n                // await self.notebookCodeOptimizer.optimizeAllCodeCells(\n                //   this.config,\n                //   undefined,\n                //   nb.content\n                // );\n                console.log(\"It's an empty button.\");\n            }\n        });\n        nb.toolbar.addItem(\"Optimize Code\", button);\n        // nb.toolbar.insertAfter(\n        //   'cellType',\n        //   this.app.commands.label(Constants.OPTIMIZE_ALL_COMMAND),\n        //   button\n        // );\n        nb.toolbar.insertItem(10, 'clearOutputs', button);\n        // context.saveState.connect(this.onSave, this);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n    // private async onSave(\n    //   context: DocumentRegistry.IContext<INotebookModel>,\n    //   state: DocumentRegistry.SaveState\n    // ) {\n    //   if (state === 'started' && this.config.formatOnSave) {\n    //     await this.notebookCodeOptimizer.optimizeAllCodeCells(this.config);\n    //   }\n    // }\n    setupWidgetExtension() {\n        this.app.docRegistry.addWidgetExtension('Notebook', this);\n    }\n    setupContextMenu() {\n        this.app.contextMenu.addItem({\n            command: Constants.OPTIMIZE_COMMAND,\n            selector: '.jp-Notebook'\n        });\n        const commands = this.app.commands;\n        const deepcoderMenu = new Menu({ commands });\n        deepcoderMenu.title.label = 'NeuralCoder';\n        /*workaround 1: single-framework*/\n        deepcoderMenu.title.label;\n        deepcoderMenu.addItem({ command: Constants.OPTIMIZE_AMP_COMMAND });\n        deepcoderMenu.addItem({ type: 'separator' });\n        deepcoderMenu.addItem({ command: Constants.OPTIMIZE_INC_DQ_COMMAND });\n        deepcoderMenu.addItem({ type: 'separator' });\n        deepcoderMenu.addItem({ command: Constants.OPTIMIZE_JIT_COMMAND });\n        deepcoderMenu.addItem({ type: 'separator' });\n        deepcoderMenu.addItem({ command: Constants.OPTIMIZE_CL_COMMAND });\n        deepcoderMenu.addItem({ type: 'separator' });\n        deepcoderMenu.addItem({ command: Constants.OPTIMIZE_CToC_COMMAND });\n        deepcoderMenu.addItem({ type: 'separator' });\n        deepcoderMenu.addItem({ command: Constants.OPTIMIZE_PROFILER_COMMAND });\n        /*****workaround 2:multi-framework******/\n        // const amp_submenu = new Menu({commands})\n        // amp_submenu.title.label = 'Automatic Mixed Precison(BF16)'\n        // amp_submenu.addItem({args:{\"feature\":\"Automatic Mixed Precison\"},command: Constants.OPTIMIZE_PT_COMMAND})\n        // amp_submenu.addItem({args:{\"feature\":\"Automatic Mixed Precison\"},command: Constants.OPTIMIZE_TF_COMMAND})\n        // amp_submenu.addItem({args:{\"feature\":\"Automatic Mixed Precison\"},command: Constants.OPTIMIZE_KERAS_COMMAND})\n        // deepcoderMenu.addItem({type:'submenu', submenu:amp_submenu})\n        // const inc_dq_submenu = new Menu({commands})\n        // inc_dq_submenu.title.label = 'INC Dynamic Quantization(INT8)'\n        // inc_dq_submenu.addItem({args:{\"feature\":\"INC Dynamic Quantization\"},command: Constants.OPTIMIZE_PT_COMMAND})\n        // inc_dq_submenu.addItem({args:{\"feature\":\"Automatic Mixed Precison\"},command: Constants.OPTIMIZE_TF_COMMAND})\n        // inc_dq_submenu.addItem({args:{\"feature\":\"Automatic Mixed Precison\"},command: Constants.OPTIMIZE_KERAS_COMMAND})\n        // deepcoderMenu.addItem({type:'submenu', submenu:inc_dq_submenu})\n        // const inc8_static_submenu = new Menu({commands})\n        // inc8_static_submenu.title.label = 'INT8 STATIC Quantization  '\n        // inc8_static_submenu.addItem({args:{\"feature\":\"INC Dynamic Quantization\"},command: Constants.OPTIMIZE_PT_COMMAND})\n        // inc8_static_submenu.addItem({args:{\"feature\":\"INC Dynamic Quantization\"},command: Constants.OPTIMIZE_TF_COMMAND})\n        // deepcoderMenu.addItem({type:'submenu', submenu:inc_dq_submenu})\n        // const jit_trace_submenu = new Menu({commands})\n        // inc8_static_submenu.title.label = 'INT8 STATIC Quantization  '\n        // inc8_static_submenu.addItem({args:{\"feature\":\"INC Dynamic Quantization\"},command: Constants.OPTIMIZE_PT_COMMAND})\n        // inc8_static_submenu.addItem({args:{\"feature\":\"INC Dynamic Quantization\"},command: Constants.OPTIMIZE_TF_COMMAND})\n        // deepcoderMenu.addItem({type:'submenu', submenu:inc_dq_submenu})\n        this.menu.addMenu(deepcoderMenu);\n    }\n    setupAllCommands() {\n        // this.client.getAvailableFormatters().then(data => {\n        //   const formatters = JSON.parse(data).formatters;\n        //   const menuGroup: Array<{ command: string }> = [];\n        //   Object.keys(formatters).forEach(formatter => {\n        //     if (formatters[formatter].enabled) {\n        //       const command = `${Constants.SHORT_PLUGIN_NAME}:${formatter}`;\n        //       this.setupCommand(formatter, formatters[formatter].label, command);\n        //       menuGroup.push({ command });\n        //     }\n        //   });\n        //   this.menu.editMenu.addGroup(menuGroup);\n        // });\n        // this.app.commands.addCommand(Constants.OPTIMIZE_COMMAND, {\n        //   execute: async () => {\n        //     await this.notebookCodeOptimizer.optimizeSelectedCodeCells(this.config);\n        //   },\n        //   // TODO: Add back isVisible\n        //   label: 'Format cell'\n        // });\n        this.app.commands.addCommand(Constants.OPTIMIZE_ALL_COMMAND, {\n            execute: async () => {\n                await this.notebookCodeOptimizer.optimizeAllCodeCells(this.config);\n            },\n            iconClass: Constants.ICON_FORMAT_ALL,\n            iconLabel: 'Optimize code'\n            // TODO: Add back isVisible\n        });\n        this.app.commands.addCommand(Constants.OPTIMIZE_AMP_COMMAND, {\n            execute: async () => {\n                await this.notebookCodeOptimizer.optimizeAllCodeCells(this.config);\n            },\n            label: 'Automatic Mixed Precison'\n            // TODO: Add back isVisible\n        });\n        this.app.commands.addCommand(Constants.OPTIMIZE_INC_DQ_COMMAND, {\n            execute: async () => {\n                await this.notebookCodeOptimizer.optimizeAllCodeCells(this.config);\n            },\n            label: 'INC Dynamic Quantization (INT8) '\n            // TODO: Add back isVisible\n        });\n        this.app.commands.addCommand(Constants.OPTIMIZE_JIT_COMMAND, {\n            execute: async () => {\n                await this.notebookCodeOptimizer.optimizeAllCodeCells(this.config);\n            },\n            label: 'JIT'\n            // TODO: Add back isVisible\n        });\n        this.app.commands.addCommand(Constants.OPTIMIZE_CL_COMMAND, {\n            execute: async () => {\n                await this.notebookCodeOptimizer.optimizeAllCodeCells(this.config);\n            },\n            label: 'Channels Last (memory fomat)'\n            // TODO: Add back isVisible\n        });\n        this.app.commands.addCommand(Constants.OPTIMIZE_CToC_COMMAND, {\n            execute: async () => {\n                if (!this.loading.isAttached) {\n                    // Attach the widget to the main work area if it's not there\n                    this.app.shell.add(this.loading, 'jp-main-content-panel');\n                }\n                // Activate the widget\n                this.app.shell.activateById(this.loading.id);\n                console.log(\"loading circle:\", this.loading);\n                this.loading.show();\n                await this.notebookCodeOptimizer.optimizeAllCodeCells(this.config, \"pytorch_cuda_to_cpu\");\n                this.loading.close();\n            },\n            label: 'CUDA to CPU'\n            // TODO: Add back isVisible\n        });\n        // this.app.commands.addCommand(Constants.OPTIMIZE_PROFILER_COMMAND, {\n        //   execute: async () => {\n        //     await this.notebookCodeOptimizer.optimizeAllCodeCells(this.config);\n        //   },\n        //   label: 'Profiler'\n        //   // TODO: Add back isVisible\n        // });\n    }\n}\n/**\n * Initialization data for the deepcoder-jupyterlab extension.\n */\nconst plugin = {\n    id: 'deepcoder-jupyterlab:plugin',\n    autoStart: true,\n    // requires: [ICommandPalette,INotebookTracker,ISettingRegistry,IMainMenu,IEditorTracker],\n    requires: [ICommandPalette, INotebookTracker, IMainMenu],\n    optional: [ISettingRegistry],\n    activate: (app, palette, tracker, \n    // settingRegistry: ISettingRegistry,\n    menu) => {\n        new JupyterLabDeepCoder(app, tracker, \n        // palette\n        // settingRegistry,\n        menu);\n        console.log('JupyterLab extension jupyterlab_apod is activated!');\n        console.log('ICommandPalette:', palette);\n    }\n};\nexport default plugin;\n"],"names":[],"sourceRoot":""}