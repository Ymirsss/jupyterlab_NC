--- /home2/longxin/Neural_Coder_EXT/tmp.py	2022-08-19 10:30:24.679324630 +0800
+++ /home2/longxin/Neural_Coder_EXT/tmp_nc_enabled.py	2022-08-19 10:30:40.767895733 +0800
@@ -18,7 +18,49 @@ if "GraphModule" not in str(type(model))
 model.eval()
 input = torch.rand(1, 3, 224, 224)
 with torch.no_grad():
-        output = model(input)
+        # [NeuralCoder] pytorch_benchmark [Beginning Line] 
+        if not False:
+            try:
+                time
+                time_nc = time.time
+            except:
+                from time import time as time_nc
+            count_iter_ = 0
+            total_time_ = 0
+            num_iter_ = 10
+            num_warmup_iter_ = 5
+            list_batch_time_ = []
+            for i_ in range(num_iter_):
+                count_iter_ = count_iter_ + 1
+                if count_iter_ > num_warmup_iter_:
+                    t1_ = time_nc()
+                try:
+                    torch
+                    no_grad = torch.no_grad
+                except:
+                    from torch import no_grad
+                with no_grad():
+        # [NeuralCoder] pytorch_benchmark [Ending Line]
+                    output = model(input)
+        # [NeuralCoder] pytorch_benchmark [Beginning Line] 
+                if count_iter_ > num_warmup_iter_:
+                    t2_ = time_nc()
+                    batch_time_ = t2_ - t1_
+                    list_batch_time_.append(batch_time_)
+                    total_time_ = total_time_ + batch_time_
+            print("Neural_Coder_Bench_IPS: ", round((num_iter_ - num_warmup_iter_) / total_time_, 3))
+            print("Neural_Coder_Bench_MSPI: ", round(total_time_ / (num_iter_ - num_warmup_iter_) * 1000, 3))
+            list_batch_time_.sort()
+            p50_latency_ = list_batch_time_[int(len(list_batch_time_) * 0.50) - 1] * 1000
+            p90_latency_ = list_batch_time_[int(len(list_batch_time_) * 0.90) - 1] * 1000
+            p99_latency_ = list_batch_time_[int(len(list_batch_time_) * 0.99) - 1] * 1000
+            print("Neural_Coder_Bench_P50: ", round(p50_latency_, 3))
+            print("Neural_Coder_Bench_P90: ", round(p90_latency_, 3))
+            print("Neural_Coder_Bench_P99: ", round(p99_latency_, 3))
+            quit()
+        else:
+            output = model(input)
+        # [NeuralCoder] pytorch_benchmark [Ending Line]
 
 # this is the beginning of a single code snippet
 
